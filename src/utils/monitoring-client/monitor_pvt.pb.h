// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor_pvt.proto

#ifndef PROTOBUF_INCLUDED_monitor_5fpvt_2eproto
#define PROTOBUF_INCLUDED_monitor_5fpvt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_monitor_5fpvt_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_monitor_5fpvt_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_monitor_5fpvt_2eproto();
namespace gnss_sdr {
class MonitorPvt;
class MonitorPvtDefaultTypeInternal;
extern MonitorPvtDefaultTypeInternal _MonitorPvt_default_instance_;
}  // namespace gnss_sdr
namespace google {
namespace protobuf {
template<> ::gnss_sdr::MonitorPvt* Arena::CreateMaybeMessage<::gnss_sdr::MonitorPvt>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gnss_sdr {

// ===================================================================

class MonitorPvt :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gnss_sdr.MonitorPvt) */ {
 public:
  MonitorPvt();
  virtual ~MonitorPvt();

  MonitorPvt(const MonitorPvt& from);

  inline MonitorPvt& operator=(const MonitorPvt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonitorPvt(MonitorPvt&& from) noexcept
    : MonitorPvt() {
    *this = ::std::move(from);
  }

  inline MonitorPvt& operator=(MonitorPvt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MonitorPvt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorPvt* internal_default_instance() {
    return reinterpret_cast<const MonitorPvt*>(
               &_MonitorPvt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MonitorPvt* other);
  friend void swap(MonitorPvt& a, MonitorPvt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonitorPvt* New() const final {
    return CreateMaybeMessage<MonitorPvt>(nullptr);
  }

  MonitorPvt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MonitorPvt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MonitorPvt& from);
  void MergeFrom(const MonitorPvt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorPvt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 tow_at_current_symbol_ms = 1;
  void clear_tow_at_current_symbol_ms();
  static const int kTowAtCurrentSymbolMsFieldNumber = 1;
  ::google::protobuf::uint32 tow_at_current_symbol_ms() const;
  void set_tow_at_current_symbol_ms(::google::protobuf::uint32 value);

  // uint32 week = 2;
  void clear_week();
  static const int kWeekFieldNumber = 2;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // double rx_time = 3;
  void clear_rx_time();
  static const int kRxTimeFieldNumber = 3;
  double rx_time() const;
  void set_rx_time(double value);

  // double user_clk_offset = 4;
  void clear_user_clk_offset();
  static const int kUserClkOffsetFieldNumber = 4;
  double user_clk_offset() const;
  void set_user_clk_offset(double value);

  // double pos_x = 5;
  void clear_pos_x();
  static const int kPosXFieldNumber = 5;
  double pos_x() const;
  void set_pos_x(double value);

  // double pos_y = 6;
  void clear_pos_y();
  static const int kPosYFieldNumber = 6;
  double pos_y() const;
  void set_pos_y(double value);

  // double pos_z = 7;
  void clear_pos_z();
  static const int kPosZFieldNumber = 7;
  double pos_z() const;
  void set_pos_z(double value);

  // double vel_x = 8;
  void clear_vel_x();
  static const int kVelXFieldNumber = 8;
  double vel_x() const;
  void set_vel_x(double value);

  // double vel_y = 9;
  void clear_vel_y();
  static const int kVelYFieldNumber = 9;
  double vel_y() const;
  void set_vel_y(double value);

  // double vel_z = 10;
  void clear_vel_z();
  static const int kVelZFieldNumber = 10;
  double vel_z() const;
  void set_vel_z(double value);

  // double cov_xx = 11;
  void clear_cov_xx();
  static const int kCovXxFieldNumber = 11;
  double cov_xx() const;
  void set_cov_xx(double value);

  // double cov_yy = 12;
  void clear_cov_yy();
  static const int kCovYyFieldNumber = 12;
  double cov_yy() const;
  void set_cov_yy(double value);

  // double cov_zz = 13;
  void clear_cov_zz();
  static const int kCovZzFieldNumber = 13;
  double cov_zz() const;
  void set_cov_zz(double value);

  // double cov_xy = 14;
  void clear_cov_xy();
  static const int kCovXyFieldNumber = 14;
  double cov_xy() const;
  void set_cov_xy(double value);

  // double cov_yz = 15;
  void clear_cov_yz();
  static const int kCovYzFieldNumber = 15;
  double cov_yz() const;
  void set_cov_yz(double value);

  // double cov_zx = 16;
  void clear_cov_zx();
  static const int kCovZxFieldNumber = 16;
  double cov_zx() const;
  void set_cov_zx(double value);

  // double latitude = 17;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 17;
  double latitude() const;
  void set_latitude(double value);

  // double longitude = 18;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 18;
  double longitude() const;
  void set_longitude(double value);

  // double height = 19;
  void clear_height();
  static const int kHeightFieldNumber = 19;
  double height() const;
  void set_height(double value);

  // uint32 valid_sats = 20;
  void clear_valid_sats();
  static const int kValidSatsFieldNumber = 20;
  ::google::protobuf::uint32 valid_sats() const;
  void set_valid_sats(::google::protobuf::uint32 value);

  // uint32 solution_status = 21;
  void clear_solution_status();
  static const int kSolutionStatusFieldNumber = 21;
  ::google::protobuf::uint32 solution_status() const;
  void set_solution_status(::google::protobuf::uint32 value);

  // uint32 solution_type = 22;
  void clear_solution_type();
  static const int kSolutionTypeFieldNumber = 22;
  ::google::protobuf::uint32 solution_type() const;
  void set_solution_type(::google::protobuf::uint32 value);

  // float ar_ratio_factor = 23;
  void clear_ar_ratio_factor();
  static const int kArRatioFactorFieldNumber = 23;
  float ar_ratio_factor() const;
  void set_ar_ratio_factor(float value);

  // double gdop = 25;
  void clear_gdop();
  static const int kGdopFieldNumber = 25;
  double gdop() const;
  void set_gdop(double value);

  // double pdop = 26;
  void clear_pdop();
  static const int kPdopFieldNumber = 26;
  double pdop() const;
  void set_pdop(double value);

  // double hdop = 27;
  void clear_hdop();
  static const int kHdopFieldNumber = 27;
  double hdop() const;
  void set_hdop(double value);

  // double vdop = 28;
  void clear_vdop();
  static const int kVdopFieldNumber = 28;
  double vdop() const;
  void set_vdop(double value);

  // float ar_ratio_threshold = 24;
  void clear_ar_ratio_threshold();
  static const int kArRatioThresholdFieldNumber = 24;
  float ar_ratio_threshold() const;
  void set_ar_ratio_threshold(float value);

  // @@protoc_insertion_point(class_scope:gnss_sdr.MonitorPvt)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 tow_at_current_symbol_ms_;
  ::google::protobuf::uint32 week_;
  double rx_time_;
  double user_clk_offset_;
  double pos_x_;
  double pos_y_;
  double pos_z_;
  double vel_x_;
  double vel_y_;
  double vel_z_;
  double cov_xx_;
  double cov_yy_;
  double cov_zz_;
  double cov_xy_;
  double cov_yz_;
  double cov_zx_;
  double latitude_;
  double longitude_;
  double height_;
  ::google::protobuf::uint32 valid_sats_;
  ::google::protobuf::uint32 solution_status_;
  ::google::protobuf::uint32 solution_type_;
  float ar_ratio_factor_;
  double gdop_;
  double pdop_;
  double hdop_;
  double vdop_;
  float ar_ratio_threshold_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_monitor_5fpvt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MonitorPvt

// uint32 tow_at_current_symbol_ms = 1;
inline void MonitorPvt::clear_tow_at_current_symbol_ms() {
  tow_at_current_symbol_ms_ = 0u;
}
inline ::google::protobuf::uint32 MonitorPvt::tow_at_current_symbol_ms() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.tow_at_current_symbol_ms)
  return tow_at_current_symbol_ms_;
}
inline void MonitorPvt::set_tow_at_current_symbol_ms(::google::protobuf::uint32 value) {
  
  tow_at_current_symbol_ms_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.tow_at_current_symbol_ms)
}

// uint32 week = 2;
inline void MonitorPvt::clear_week() {
  week_ = 0u;
}
inline ::google::protobuf::uint32 MonitorPvt::week() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.week)
  return week_;
}
inline void MonitorPvt::set_week(::google::protobuf::uint32 value) {
  
  week_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.week)
}

// double rx_time = 3;
inline void MonitorPvt::clear_rx_time() {
  rx_time_ = 0;
}
inline double MonitorPvt::rx_time() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.rx_time)
  return rx_time_;
}
inline void MonitorPvt::set_rx_time(double value) {
  
  rx_time_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.rx_time)
}

// double user_clk_offset = 4;
inline void MonitorPvt::clear_user_clk_offset() {
  user_clk_offset_ = 0;
}
inline double MonitorPvt::user_clk_offset() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.user_clk_offset)
  return user_clk_offset_;
}
inline void MonitorPvt::set_user_clk_offset(double value) {
  
  user_clk_offset_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.user_clk_offset)
}

// double pos_x = 5;
inline void MonitorPvt::clear_pos_x() {
  pos_x_ = 0;
}
inline double MonitorPvt::pos_x() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.pos_x)
  return pos_x_;
}
inline void MonitorPvt::set_pos_x(double value) {
  
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.pos_x)
}

// double pos_y = 6;
inline void MonitorPvt::clear_pos_y() {
  pos_y_ = 0;
}
inline double MonitorPvt::pos_y() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.pos_y)
  return pos_y_;
}
inline void MonitorPvt::set_pos_y(double value) {
  
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.pos_y)
}

// double pos_z = 7;
inline void MonitorPvt::clear_pos_z() {
  pos_z_ = 0;
}
inline double MonitorPvt::pos_z() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.pos_z)
  return pos_z_;
}
inline void MonitorPvt::set_pos_z(double value) {
  
  pos_z_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.pos_z)
}

// double vel_x = 8;
inline void MonitorPvt::clear_vel_x() {
  vel_x_ = 0;
}
inline double MonitorPvt::vel_x() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.vel_x)
  return vel_x_;
}
inline void MonitorPvt::set_vel_x(double value) {
  
  vel_x_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.vel_x)
}

// double vel_y = 9;
inline void MonitorPvt::clear_vel_y() {
  vel_y_ = 0;
}
inline double MonitorPvt::vel_y() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.vel_y)
  return vel_y_;
}
inline void MonitorPvt::set_vel_y(double value) {
  
  vel_y_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.vel_y)
}

// double vel_z = 10;
inline void MonitorPvt::clear_vel_z() {
  vel_z_ = 0;
}
inline double MonitorPvt::vel_z() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.vel_z)
  return vel_z_;
}
inline void MonitorPvt::set_vel_z(double value) {
  
  vel_z_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.vel_z)
}

// double cov_xx = 11;
inline void MonitorPvt::clear_cov_xx() {
  cov_xx_ = 0;
}
inline double MonitorPvt::cov_xx() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.cov_xx)
  return cov_xx_;
}
inline void MonitorPvt::set_cov_xx(double value) {
  
  cov_xx_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.cov_xx)
}

// double cov_yy = 12;
inline void MonitorPvt::clear_cov_yy() {
  cov_yy_ = 0;
}
inline double MonitorPvt::cov_yy() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.cov_yy)
  return cov_yy_;
}
inline void MonitorPvt::set_cov_yy(double value) {
  
  cov_yy_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.cov_yy)
}

// double cov_zz = 13;
inline void MonitorPvt::clear_cov_zz() {
  cov_zz_ = 0;
}
inline double MonitorPvt::cov_zz() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.cov_zz)
  return cov_zz_;
}
inline void MonitorPvt::set_cov_zz(double value) {
  
  cov_zz_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.cov_zz)
}

// double cov_xy = 14;
inline void MonitorPvt::clear_cov_xy() {
  cov_xy_ = 0;
}
inline double MonitorPvt::cov_xy() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.cov_xy)
  return cov_xy_;
}
inline void MonitorPvt::set_cov_xy(double value) {
  
  cov_xy_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.cov_xy)
}

// double cov_yz = 15;
inline void MonitorPvt::clear_cov_yz() {
  cov_yz_ = 0;
}
inline double MonitorPvt::cov_yz() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.cov_yz)
  return cov_yz_;
}
inline void MonitorPvt::set_cov_yz(double value) {
  
  cov_yz_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.cov_yz)
}

// double cov_zx = 16;
inline void MonitorPvt::clear_cov_zx() {
  cov_zx_ = 0;
}
inline double MonitorPvt::cov_zx() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.cov_zx)
  return cov_zx_;
}
inline void MonitorPvt::set_cov_zx(double value) {
  
  cov_zx_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.cov_zx)
}

// double latitude = 17;
inline void MonitorPvt::clear_latitude() {
  latitude_ = 0;
}
inline double MonitorPvt::latitude() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.latitude)
  return latitude_;
}
inline void MonitorPvt::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.latitude)
}

// double longitude = 18;
inline void MonitorPvt::clear_longitude() {
  longitude_ = 0;
}
inline double MonitorPvt::longitude() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.longitude)
  return longitude_;
}
inline void MonitorPvt::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.longitude)
}

// double height = 19;
inline void MonitorPvt::clear_height() {
  height_ = 0;
}
inline double MonitorPvt::height() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.height)
  return height_;
}
inline void MonitorPvt::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.height)
}

// uint32 valid_sats = 20;
inline void MonitorPvt::clear_valid_sats() {
  valid_sats_ = 0u;
}
inline ::google::protobuf::uint32 MonitorPvt::valid_sats() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.valid_sats)
  return valid_sats_;
}
inline void MonitorPvt::set_valid_sats(::google::protobuf::uint32 value) {
  
  valid_sats_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.valid_sats)
}

// uint32 solution_status = 21;
inline void MonitorPvt::clear_solution_status() {
  solution_status_ = 0u;
}
inline ::google::protobuf::uint32 MonitorPvt::solution_status() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.solution_status)
  return solution_status_;
}
inline void MonitorPvt::set_solution_status(::google::protobuf::uint32 value) {
  
  solution_status_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.solution_status)
}

// uint32 solution_type = 22;
inline void MonitorPvt::clear_solution_type() {
  solution_type_ = 0u;
}
inline ::google::protobuf::uint32 MonitorPvt::solution_type() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.solution_type)
  return solution_type_;
}
inline void MonitorPvt::set_solution_type(::google::protobuf::uint32 value) {
  
  solution_type_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.solution_type)
}

// float ar_ratio_factor = 23;
inline void MonitorPvt::clear_ar_ratio_factor() {
  ar_ratio_factor_ = 0;
}
inline float MonitorPvt::ar_ratio_factor() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.ar_ratio_factor)
  return ar_ratio_factor_;
}
inline void MonitorPvt::set_ar_ratio_factor(float value) {
  
  ar_ratio_factor_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.ar_ratio_factor)
}

// float ar_ratio_threshold = 24;
inline void MonitorPvt::clear_ar_ratio_threshold() {
  ar_ratio_threshold_ = 0;
}
inline float MonitorPvt::ar_ratio_threshold() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.ar_ratio_threshold)
  return ar_ratio_threshold_;
}
inline void MonitorPvt::set_ar_ratio_threshold(float value) {
  
  ar_ratio_threshold_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.ar_ratio_threshold)
}

// double gdop = 25;
inline void MonitorPvt::clear_gdop() {
  gdop_ = 0;
}
inline double MonitorPvt::gdop() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.gdop)
  return gdop_;
}
inline void MonitorPvt::set_gdop(double value) {
  
  gdop_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.gdop)
}

// double pdop = 26;
inline void MonitorPvt::clear_pdop() {
  pdop_ = 0;
}
inline double MonitorPvt::pdop() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.pdop)
  return pdop_;
}
inline void MonitorPvt::set_pdop(double value) {
  
  pdop_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.pdop)
}

// double hdop = 27;
inline void MonitorPvt::clear_hdop() {
  hdop_ = 0;
}
inline double MonitorPvt::hdop() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.hdop)
  return hdop_;
}
inline void MonitorPvt::set_hdop(double value) {
  
  hdop_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.hdop)
}

// double vdop = 28;
inline void MonitorPvt::clear_vdop() {
  vdop_ = 0;
}
inline double MonitorPvt::vdop() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.MonitorPvt.vdop)
  return vdop_;
}
inline void MonitorPvt::set_vdop(double value) {
  
  vdop_ = value;
  // @@protoc_insertion_point(field_set:gnss_sdr.MonitorPvt.vdop)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss_sdr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_monitor_5fpvt_2eproto
