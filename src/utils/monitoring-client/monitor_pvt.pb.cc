// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor_pvt.proto

#include "monitor_pvt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace gnss_sdr {
class MonitorPvtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MonitorPvt> _instance;
} _MonitorPvt_default_instance_;
}  // namespace gnss_sdr
static void InitDefaultsMonitorPvt_monitor_5fpvt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnss_sdr::_MonitorPvt_default_instance_;
    new (ptr) ::gnss_sdr::MonitorPvt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnss_sdr::MonitorPvt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MonitorPvt_monitor_5fpvt_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMonitorPvt_monitor_5fpvt_2eproto}, {}};

void InitDefaults_monitor_5fpvt_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_MonitorPvt_monitor_5fpvt_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_monitor_5fpvt_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_monitor_5fpvt_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_monitor_5fpvt_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_monitor_5fpvt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, tow_at_current_symbol_ms_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, week_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, rx_time_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, user_clk_offset_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, pos_x_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, pos_y_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, pos_z_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, vel_x_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, vel_y_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, vel_z_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, cov_xx_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, cov_yy_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, cov_zz_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, cov_xy_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, cov_yz_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, cov_zx_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, latitude_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, longitude_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, height_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, valid_sats_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, solution_status_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, solution_type_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, ar_ratio_factor_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, ar_ratio_threshold_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, gdop_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, pdop_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, hdop_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::MonitorPvt, vdop_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gnss_sdr::MonitorPvt)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gnss_sdr::_MonitorPvt_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_monitor_5fpvt_2eproto = {
  {}, AddDescriptors_monitor_5fpvt_2eproto, "monitor_pvt.proto", schemas,
  file_default_instances, TableStruct_monitor_5fpvt_2eproto::offsets,
  file_level_metadata_monitor_5fpvt_2eproto, 1, file_level_enum_descriptors_monitor_5fpvt_2eproto, file_level_service_descriptors_monitor_5fpvt_2eproto,
};

const char descriptor_table_protodef_monitor_5fpvt_2eproto[] =
  "\n\021monitor_pvt.proto\022\010gnss_sdr\"\206\004\n\nMonito"
  "rPvt\022 \n\030tow_at_current_symbol_ms\030\001 \001(\r\022\014"
  "\n\004week\030\002 \001(\r\022\017\n\007rx_time\030\003 \001(\001\022\027\n\017user_cl"
  "k_offset\030\004 \001(\001\022\r\n\005pos_x\030\005 \001(\001\022\r\n\005pos_y\030\006"
  " \001(\001\022\r\n\005pos_z\030\007 \001(\001\022\r\n\005vel_x\030\010 \001(\001\022\r\n\005ve"
  "l_y\030\t \001(\001\022\r\n\005vel_z\030\n \001(\001\022\016\n\006cov_xx\030\013 \001(\001"
  "\022\016\n\006cov_yy\030\014 \001(\001\022\016\n\006cov_zz\030\r \001(\001\022\016\n\006cov_"
  "xy\030\016 \001(\001\022\016\n\006cov_yz\030\017 \001(\001\022\016\n\006cov_zx\030\020 \001(\001"
  "\022\020\n\010latitude\030\021 \001(\001\022\021\n\tlongitude\030\022 \001(\001\022\016\n"
  "\006height\030\023 \001(\001\022\022\n\nvalid_sats\030\024 \001(\r\022\027\n\017sol"
  "ution_status\030\025 \001(\r\022\025\n\rsolution_type\030\026 \001("
  "\r\022\027\n\017ar_ratio_factor\030\027 \001(\002\022\032\n\022ar_ratio_t"
  "hreshold\030\030 \001(\002\022\014\n\004gdop\030\031 \001(\001\022\014\n\004pdop\030\032 \001"
  "(\001\022\014\n\004hdop\030\033 \001(\001\022\014\n\004vdop\030\034 \001(\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_monitor_5fpvt_2eproto = {
  false, InitDefaults_monitor_5fpvt_2eproto, 
  descriptor_table_protodef_monitor_5fpvt_2eproto,
  "monitor_pvt.proto", &assign_descriptors_table_monitor_5fpvt_2eproto, 558,
};

void AddDescriptors_monitor_5fpvt_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_monitor_5fpvt_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_monitor_5fpvt_2eproto = []() { AddDescriptors_monitor_5fpvt_2eproto(); return true; }();
namespace gnss_sdr {

// ===================================================================

void MonitorPvt::InitAsDefaultInstance() {
}
class MonitorPvt::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MonitorPvt::kTowAtCurrentSymbolMsFieldNumber;
const int MonitorPvt::kWeekFieldNumber;
const int MonitorPvt::kRxTimeFieldNumber;
const int MonitorPvt::kUserClkOffsetFieldNumber;
const int MonitorPvt::kPosXFieldNumber;
const int MonitorPvt::kPosYFieldNumber;
const int MonitorPvt::kPosZFieldNumber;
const int MonitorPvt::kVelXFieldNumber;
const int MonitorPvt::kVelYFieldNumber;
const int MonitorPvt::kVelZFieldNumber;
const int MonitorPvt::kCovXxFieldNumber;
const int MonitorPvt::kCovYyFieldNumber;
const int MonitorPvt::kCovZzFieldNumber;
const int MonitorPvt::kCovXyFieldNumber;
const int MonitorPvt::kCovYzFieldNumber;
const int MonitorPvt::kCovZxFieldNumber;
const int MonitorPvt::kLatitudeFieldNumber;
const int MonitorPvt::kLongitudeFieldNumber;
const int MonitorPvt::kHeightFieldNumber;
const int MonitorPvt::kValidSatsFieldNumber;
const int MonitorPvt::kSolutionStatusFieldNumber;
const int MonitorPvt::kSolutionTypeFieldNumber;
const int MonitorPvt::kArRatioFactorFieldNumber;
const int MonitorPvt::kArRatioThresholdFieldNumber;
const int MonitorPvt::kGdopFieldNumber;
const int MonitorPvt::kPdopFieldNumber;
const int MonitorPvt::kHdopFieldNumber;
const int MonitorPvt::kVdopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MonitorPvt::MonitorPvt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gnss_sdr.MonitorPvt)
}
MonitorPvt::MonitorPvt(const MonitorPvt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tow_at_current_symbol_ms_, &from.tow_at_current_symbol_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&ar_ratio_threshold_) -
    reinterpret_cast<char*>(&tow_at_current_symbol_ms_)) + sizeof(ar_ratio_threshold_));
  // @@protoc_insertion_point(copy_constructor:gnss_sdr.MonitorPvt)
}

void MonitorPvt::SharedCtor() {
  ::memset(&tow_at_current_symbol_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ar_ratio_threshold_) -
      reinterpret_cast<char*>(&tow_at_current_symbol_ms_)) + sizeof(ar_ratio_threshold_));
}

MonitorPvt::~MonitorPvt() {
  // @@protoc_insertion_point(destructor:gnss_sdr.MonitorPvt)
  SharedDtor();
}

void MonitorPvt::SharedDtor() {
}

void MonitorPvt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitorPvt& MonitorPvt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MonitorPvt_monitor_5fpvt_2eproto.base);
  return *internal_default_instance();
}


void MonitorPvt::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_sdr.MonitorPvt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tow_at_current_symbol_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ar_ratio_threshold_) -
      reinterpret_cast<char*>(&tow_at_current_symbol_ms_)) + sizeof(ar_ratio_threshold_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MonitorPvt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MonitorPvt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 tow_at_current_symbol_ms = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_tow_at_current_symbol_ms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 week = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_week(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double rx_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_rx_time(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double user_clk_offset = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_user_clk_offset(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double pos_x = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_pos_x(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double pos_y = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_pos_y(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double pos_z = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_pos_z(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double vel_x = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_vel_x(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double vel_y = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_vel_y(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double vel_z = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_vel_z(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double cov_xx = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_cov_xx(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double cov_yy = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 97) goto handle_unusual;
        msg->set_cov_yy(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double cov_zz = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 105) goto handle_unusual;
        msg->set_cov_zz(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double cov_xy = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 113) goto handle_unusual;
        msg->set_cov_xy(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double cov_yz = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 121) goto handle_unusual;
        msg->set_cov_yz(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double cov_zx = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 129) goto handle_unusual;
        msg->set_cov_zx(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double latitude = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 137) goto handle_unusual;
        msg->set_latitude(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double longitude = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 145) goto handle_unusual;
        msg->set_longitude(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double height = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 153) goto handle_unusual;
        msg->set_height(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // uint32 valid_sats = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_valid_sats(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 solution_status = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_solution_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 solution_type = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_solution_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float ar_ratio_factor = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 189) goto handle_unusual;
        msg->set_ar_ratio_factor(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float ar_ratio_threshold = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 197) goto handle_unusual;
        msg->set_ar_ratio_threshold(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // double gdop = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 201) goto handle_unusual;
        msg->set_gdop(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double pdop = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 209) goto handle_unusual;
        msg->set_pdop(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double hdop = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 217) goto handle_unusual;
        msg->set_hdop(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double vdop = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 225) goto handle_unusual;
        msg->set_vdop(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MonitorPvt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gnss_sdr.MonitorPvt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tow_at_current_symbol_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tow_at_current_symbol_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 week = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rx_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rx_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double user_clk_offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &user_clk_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pos_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pos_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pos_z = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vel_x = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vel_y = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vel_z = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vel_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cov_xx = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cov_xx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cov_yy = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (97 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cov_yy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cov_zz = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (105 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cov_zz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cov_xy = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (113 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cov_xy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cov_yz = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (121 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cov_yz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cov_zx = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (129 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cov_zx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (137 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (145 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (153 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 valid_sats = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_sats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 solution_status = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solution_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 solution_type = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solution_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ar_ratio_factor = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (189 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ar_ratio_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ar_ratio_threshold = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (197 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ar_ratio_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gdop = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (201 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pdop = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (209 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double hdop = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (217 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vdop = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (225 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gnss_sdr.MonitorPvt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gnss_sdr.MonitorPvt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MonitorPvt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gnss_sdr.MonitorPvt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tow_at_current_symbol_ms = 1;
  if (this->tow_at_current_symbol_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tow_at_current_symbol_ms(), output);
  }

  // uint32 week = 2;
  if (this->week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->week(), output);
  }

  // double rx_time = 3;
  if (this->rx_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rx_time(), output);
  }

  // double user_clk_offset = 4;
  if (this->user_clk_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->user_clk_offset(), output);
  }

  // double pos_x = 5;
  if (this->pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pos_x(), output);
  }

  // double pos_y = 6;
  if (this->pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pos_y(), output);
  }

  // double pos_z = 7;
  if (this->pos_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->pos_z(), output);
  }

  // double vel_x = 8;
  if (this->vel_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->vel_x(), output);
  }

  // double vel_y = 9;
  if (this->vel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->vel_y(), output);
  }

  // double vel_z = 10;
  if (this->vel_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->vel_z(), output);
  }

  // double cov_xx = 11;
  if (this->cov_xx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->cov_xx(), output);
  }

  // double cov_yy = 12;
  if (this->cov_yy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->cov_yy(), output);
  }

  // double cov_zz = 13;
  if (this->cov_zz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->cov_zz(), output);
  }

  // double cov_xy = 14;
  if (this->cov_xy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->cov_xy(), output);
  }

  // double cov_yz = 15;
  if (this->cov_yz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->cov_yz(), output);
  }

  // double cov_zx = 16;
  if (this->cov_zx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->cov_zx(), output);
  }

  // double latitude = 17;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->latitude(), output);
  }

  // double longitude = 18;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->longitude(), output);
  }

  // double height = 19;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->height(), output);
  }

  // uint32 valid_sats = 20;
  if (this->valid_sats() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->valid_sats(), output);
  }

  // uint32 solution_status = 21;
  if (this->solution_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->solution_status(), output);
  }

  // uint32 solution_type = 22;
  if (this->solution_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->solution_type(), output);
  }

  // float ar_ratio_factor = 23;
  if (this->ar_ratio_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->ar_ratio_factor(), output);
  }

  // float ar_ratio_threshold = 24;
  if (this->ar_ratio_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->ar_ratio_threshold(), output);
  }

  // double gdop = 25;
  if (this->gdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->gdop(), output);
  }

  // double pdop = 26;
  if (this->pdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->pdop(), output);
  }

  // double hdop = 27;
  if (this->hdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->hdop(), output);
  }

  // double vdop = 28;
  if (this->vdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->vdop(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gnss_sdr.MonitorPvt)
}

::google::protobuf::uint8* MonitorPvt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnss_sdr.MonitorPvt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tow_at_current_symbol_ms = 1;
  if (this->tow_at_current_symbol_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tow_at_current_symbol_ms(), target);
  }

  // uint32 week = 2;
  if (this->week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->week(), target);
  }

  // double rx_time = 3;
  if (this->rx_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rx_time(), target);
  }

  // double user_clk_offset = 4;
  if (this->user_clk_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->user_clk_offset(), target);
  }

  // double pos_x = 5;
  if (this->pos_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pos_x(), target);
  }

  // double pos_y = 6;
  if (this->pos_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pos_y(), target);
  }

  // double pos_z = 7;
  if (this->pos_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->pos_z(), target);
  }

  // double vel_x = 8;
  if (this->vel_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->vel_x(), target);
  }

  // double vel_y = 9;
  if (this->vel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->vel_y(), target);
  }

  // double vel_z = 10;
  if (this->vel_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->vel_z(), target);
  }

  // double cov_xx = 11;
  if (this->cov_xx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->cov_xx(), target);
  }

  // double cov_yy = 12;
  if (this->cov_yy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->cov_yy(), target);
  }

  // double cov_zz = 13;
  if (this->cov_zz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->cov_zz(), target);
  }

  // double cov_xy = 14;
  if (this->cov_xy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->cov_xy(), target);
  }

  // double cov_yz = 15;
  if (this->cov_yz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->cov_yz(), target);
  }

  // double cov_zx = 16;
  if (this->cov_zx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->cov_zx(), target);
  }

  // double latitude = 17;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->latitude(), target);
  }

  // double longitude = 18;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->longitude(), target);
  }

  // double height = 19;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->height(), target);
  }

  // uint32 valid_sats = 20;
  if (this->valid_sats() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->valid_sats(), target);
  }

  // uint32 solution_status = 21;
  if (this->solution_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->solution_status(), target);
  }

  // uint32 solution_type = 22;
  if (this->solution_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->solution_type(), target);
  }

  // float ar_ratio_factor = 23;
  if (this->ar_ratio_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->ar_ratio_factor(), target);
  }

  // float ar_ratio_threshold = 24;
  if (this->ar_ratio_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->ar_ratio_threshold(), target);
  }

  // double gdop = 25;
  if (this->gdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->gdop(), target);
  }

  // double pdop = 26;
  if (this->pdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->pdop(), target);
  }

  // double hdop = 27;
  if (this->hdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->hdop(), target);
  }

  // double vdop = 28;
  if (this->vdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->vdop(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_sdr.MonitorPvt)
  return target;
}

size_t MonitorPvt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_sdr.MonitorPvt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 tow_at_current_symbol_ms = 1;
  if (this->tow_at_current_symbol_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tow_at_current_symbol_ms());
  }

  // uint32 week = 2;
  if (this->week() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->week());
  }

  // double rx_time = 3;
  if (this->rx_time() != 0) {
    total_size += 1 + 8;
  }

  // double user_clk_offset = 4;
  if (this->user_clk_offset() != 0) {
    total_size += 1 + 8;
  }

  // double pos_x = 5;
  if (this->pos_x() != 0) {
    total_size += 1 + 8;
  }

  // double pos_y = 6;
  if (this->pos_y() != 0) {
    total_size += 1 + 8;
  }

  // double pos_z = 7;
  if (this->pos_z() != 0) {
    total_size += 1 + 8;
  }

  // double vel_x = 8;
  if (this->vel_x() != 0) {
    total_size += 1 + 8;
  }

  // double vel_y = 9;
  if (this->vel_y() != 0) {
    total_size += 1 + 8;
  }

  // double vel_z = 10;
  if (this->vel_z() != 0) {
    total_size += 1 + 8;
  }

  // double cov_xx = 11;
  if (this->cov_xx() != 0) {
    total_size += 1 + 8;
  }

  // double cov_yy = 12;
  if (this->cov_yy() != 0) {
    total_size += 1 + 8;
  }

  // double cov_zz = 13;
  if (this->cov_zz() != 0) {
    total_size += 1 + 8;
  }

  // double cov_xy = 14;
  if (this->cov_xy() != 0) {
    total_size += 1 + 8;
  }

  // double cov_yz = 15;
  if (this->cov_yz() != 0) {
    total_size += 1 + 8;
  }

  // double cov_zx = 16;
  if (this->cov_zx() != 0) {
    total_size += 2 + 8;
  }

  // double latitude = 17;
  if (this->latitude() != 0) {
    total_size += 2 + 8;
  }

  // double longitude = 18;
  if (this->longitude() != 0) {
    total_size += 2 + 8;
  }

  // double height = 19;
  if (this->height() != 0) {
    total_size += 2 + 8;
  }

  // uint32 valid_sats = 20;
  if (this->valid_sats() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->valid_sats());
  }

  // uint32 solution_status = 21;
  if (this->solution_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->solution_status());
  }

  // uint32 solution_type = 22;
  if (this->solution_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->solution_type());
  }

  // float ar_ratio_factor = 23;
  if (this->ar_ratio_factor() != 0) {
    total_size += 2 + 4;
  }

  // double gdop = 25;
  if (this->gdop() != 0) {
    total_size += 2 + 8;
  }

  // double pdop = 26;
  if (this->pdop() != 0) {
    total_size += 2 + 8;
  }

  // double hdop = 27;
  if (this->hdop() != 0) {
    total_size += 2 + 8;
  }

  // double vdop = 28;
  if (this->vdop() != 0) {
    total_size += 2 + 8;
  }

  // float ar_ratio_threshold = 24;
  if (this->ar_ratio_threshold() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitorPvt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnss_sdr.MonitorPvt)
  GOOGLE_DCHECK_NE(&from, this);
  const MonitorPvt* source =
      ::google::protobuf::DynamicCastToGenerated<MonitorPvt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnss_sdr.MonitorPvt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnss_sdr.MonitorPvt)
    MergeFrom(*source);
  }
}

void MonitorPvt::MergeFrom(const MonitorPvt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnss_sdr.MonitorPvt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tow_at_current_symbol_ms() != 0) {
    set_tow_at_current_symbol_ms(from.tow_at_current_symbol_ms());
  }
  if (from.week() != 0) {
    set_week(from.week());
  }
  if (from.rx_time() != 0) {
    set_rx_time(from.rx_time());
  }
  if (from.user_clk_offset() != 0) {
    set_user_clk_offset(from.user_clk_offset());
  }
  if (from.pos_x() != 0) {
    set_pos_x(from.pos_x());
  }
  if (from.pos_y() != 0) {
    set_pos_y(from.pos_y());
  }
  if (from.pos_z() != 0) {
    set_pos_z(from.pos_z());
  }
  if (from.vel_x() != 0) {
    set_vel_x(from.vel_x());
  }
  if (from.vel_y() != 0) {
    set_vel_y(from.vel_y());
  }
  if (from.vel_z() != 0) {
    set_vel_z(from.vel_z());
  }
  if (from.cov_xx() != 0) {
    set_cov_xx(from.cov_xx());
  }
  if (from.cov_yy() != 0) {
    set_cov_yy(from.cov_yy());
  }
  if (from.cov_zz() != 0) {
    set_cov_zz(from.cov_zz());
  }
  if (from.cov_xy() != 0) {
    set_cov_xy(from.cov_xy());
  }
  if (from.cov_yz() != 0) {
    set_cov_yz(from.cov_yz());
  }
  if (from.cov_zx() != 0) {
    set_cov_zx(from.cov_zx());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.valid_sats() != 0) {
    set_valid_sats(from.valid_sats());
  }
  if (from.solution_status() != 0) {
    set_solution_status(from.solution_status());
  }
  if (from.solution_type() != 0) {
    set_solution_type(from.solution_type());
  }
  if (from.ar_ratio_factor() != 0) {
    set_ar_ratio_factor(from.ar_ratio_factor());
  }
  if (from.gdop() != 0) {
    set_gdop(from.gdop());
  }
  if (from.pdop() != 0) {
    set_pdop(from.pdop());
  }
  if (from.hdop() != 0) {
    set_hdop(from.hdop());
  }
  if (from.vdop() != 0) {
    set_vdop(from.vdop());
  }
  if (from.ar_ratio_threshold() != 0) {
    set_ar_ratio_threshold(from.ar_ratio_threshold());
  }
}

void MonitorPvt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnss_sdr.MonitorPvt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorPvt::CopyFrom(const MonitorPvt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_sdr.MonitorPvt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorPvt::IsInitialized() const {
  return true;
}

void MonitorPvt::Swap(MonitorPvt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MonitorPvt::InternalSwap(MonitorPvt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tow_at_current_symbol_ms_, other->tow_at_current_symbol_ms_);
  swap(week_, other->week_);
  swap(rx_time_, other->rx_time_);
  swap(user_clk_offset_, other->user_clk_offset_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(pos_z_, other->pos_z_);
  swap(vel_x_, other->vel_x_);
  swap(vel_y_, other->vel_y_);
  swap(vel_z_, other->vel_z_);
  swap(cov_xx_, other->cov_xx_);
  swap(cov_yy_, other->cov_yy_);
  swap(cov_zz_, other->cov_zz_);
  swap(cov_xy_, other->cov_xy_);
  swap(cov_yz_, other->cov_yz_);
  swap(cov_zx_, other->cov_zx_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(height_, other->height_);
  swap(valid_sats_, other->valid_sats_);
  swap(solution_status_, other->solution_status_);
  swap(solution_type_, other->solution_type_);
  swap(ar_ratio_factor_, other->ar_ratio_factor_);
  swap(gdop_, other->gdop_);
  swap(pdop_, other->pdop_);
  swap(hdop_, other->hdop_);
  swap(vdop_, other->vdop_);
  swap(ar_ratio_threshold_, other->ar_ratio_threshold_);
}

::google::protobuf::Metadata MonitorPvt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_monitor_5fpvt_2eproto);
  return ::file_level_metadata_monitor_5fpvt_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss_sdr
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::gnss_sdr::MonitorPvt* Arena::CreateMaybeMessage< ::gnss_sdr::MonitorPvt >(Arena* arena) {
  return Arena::CreateInternal< ::gnss_sdr::MonitorPvt >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
